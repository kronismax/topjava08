Index: src/main/java/ru/javawebinar/topjava/util/PasswordUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/PasswordUtil.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/util/PasswordUtil.java	(revision )
@@ -0,0 +1,39 @@
+package ru.javawebinar.topjava.util;
+
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.util.StringUtils;
+
+import java.util.regex.Pattern;
+
+/**
+ * GKislin
+ * 05.01.2015.
+ */
+
+public class PasswordUtil {
+    private static final Pattern BCRYPT_PATTERN = Pattern.compile("\\A\\$2a?\\$\\d\\d\\$[./0-9A-Za-z]{53}");
+    public static final PasswordEncoder PASSWORD_ENCODER = new BCryptPasswordEncoder();
+
+    public static PasswordEncoder getPasswordEncoder() {
+        return PASSWORD_ENCODER;
+    }
+
+    public static String encode(String newPassword) {
+        if (StringUtils.isEmpty(newPassword)) {
+            return null;
+        }
+        if (isEncoded(newPassword)) {
+            return newPassword;
+        }
+        return PASSWORD_ENCODER.encode(newPassword);
+    }
+
+    public static boolean isMatch(String rawPassword, String password) {
+        return PASSWORD_ENCODER.matches(rawPassword, password);
+    }
+
+    public static boolean isEncoded(String newPassword) {
+        return BCRYPT_PATTERN.matcher(newPassword).matches();
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/util/UserUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(date 1478750941000)
+++ src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(revision )
@@ -21,9 +21,15 @@
 
     public static User updateFromTo(User user, UserTo userTo) {
         user.setName(userTo.getName());
-        user.setEmail(userTo.getEmail().toLowerCase());
+        user.setEmail(userTo.getEmail());
         user.setCaloriesPerDay(userTo.getCaloriesPerDay());
         user.setPassword(userTo.getPassword());
+        return user;
+    }
+
+    public static User prepareToSave(User user) {
+        user.setPassword(PasswordUtil.encode(user.getPassword()));
+        user.setEmail(user.getEmail().toLowerCase());
         return user;
     }
 }
Index: src/main/resources/spring/spring-security.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-security.xml	(date 1478750941000)
+++ src/main/resources/spring/spring-security.xml	(revision )
@@ -30,8 +30,12 @@
         <csrf disabled="true"/>
     </http>
 
+    <beans:bean class="ru.javawebinar.topjava.util.PasswordUtil" id="passwordEncoder" factory-method="getPasswordEncoder"/>
+
     <authentication-manager>
         <authentication-provider user-service-ref="userService">
+            <password-encoder ref="passwordEncoder"/>
+
             <!--
                         <jdbc-user-service data-source-ref="dataSource"
                                            users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(date 1478750941000)
+++ src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(revision )
@@ -12,12 +12,14 @@
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.repository.UserRepository;
 import ru.javawebinar.topjava.to.UserTo;
-import ru.javawebinar.topjava.util.UserUtil;
 import ru.javawebinar.topjava.util.exception.ExceptionUtil;
 import ru.javawebinar.topjava.util.exception.NotFoundException;
 
 import java.util.List;
 
+import static ru.javawebinar.topjava.util.UserUtil.prepareToSave;
+import static ru.javawebinar.topjava.util.UserUtil.updateFromTo;
+
 /**
  * GKislin
  * 06.03.2015.
@@ -32,7 +34,7 @@
     @Override
     public User save(User user) {
         Assert.notNull(user, "user must not be null");
-        return repository.save(user);
+        return repository.save(prepareToSave(user));
     }
 
     @CacheEvict(value = "users", allEntries = true)
@@ -62,15 +64,15 @@
     @Override
     public void update(User user) {
         Assert.notNull(user, "user must not be null");
-        repository.save(user);
+        repository.save(prepareToSave(user));
     }
 
     @CacheEvict(value = "users", allEntries = true)
     @Transactional
     @Override
     public void update(UserTo userTo) {
-        User user = get(userTo.getId());
-        repository.save(UserUtil.updateFromTo(user, userTo));
+        User user = updateFromTo(get(userTo.getId()), userTo);
+        repository.save(prepareToSave(user));
     }
 
 
Index: src/main/resources/db/populateDB.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/populateDB.sql	(date 1478750941000)
+++ src/main/resources/db/populateDB.sql	(revision )
@@ -10,11 +10,13 @@
 
 ALTER SEQUENCE global_seq RESTART WITH 100000;
 
+-- admin
 INSERT INTO users (name, email, password, calories_per_day)
-VALUES ('User', 'user@yandex.ru', 'password', 2005);
+VALUES ('User', 'user@yandex.ru', '$2a$10$Sh0ZD2NFrzRRJJEKEWn8l.92ROEuzlVyzB9SV1AM8fdluPR0aC1ni', 2005);
 
+-- password
 INSERT INTO users (name, email, password, calories_per_day)
-VALUES ('Admin', 'admin@gmail.com', 'admin', 1900);
+VALUES ('Admin', 'admin@gmail.com', '$2a$10$WejOLxVuXRpOgr4IlzQJ.eT4UcukNqHlAiOVZj1P/nmc8WbpMkiju', 1900);
 
 INSERT INTO user_roles (role, user_id) VALUES
   ('ROLE_USER', 100000),
Index: src/test/java/ru/javawebinar/topjava/UserTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/UserTestData.java	(date 1478750941000)
+++ src/test/java/ru/javawebinar/topjava/UserTestData.java	(revision )
@@ -1,8 +1,11 @@
 package ru.javawebinar.topjava;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import ru.javawebinar.topjava.matcher.ModelMatcher;
 import ru.javawebinar.topjava.model.Role;
 import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.util.PasswordUtil;
 
 import java.util.Objects;
 
@@ -13,6 +16,8 @@
  * 24.09.2015.
  */
 public class UserTestData {
+    private static final Logger LOG = LoggerFactory.getLogger(UserTestData.class);
+
     public static final int USER_ID = START_SEQ;
     public static final int ADMIN_ID = START_SEQ + 1;
 
@@ -21,7 +26,7 @@
 
     public static final ModelMatcher<User> MATCHER = ModelMatcher.of(User.class,
             (expected, actual) -> expected == actual ||
-                    (Objects.equals(expected.getPassword(), actual.getPassword())
+                    (comparePassword(expected.getPassword(), actual.getPassword())
                             && Objects.equals(expected.getId(), actual.getId())
                             && Objects.equals(expected.getName(), actual.getName())
                             && Objects.equals(expected.getEmail(), actual.getEmail())
@@ -30,4 +35,15 @@
                             && Objects.equals(expected.getRoles(), actual.getRoles())
                     )
     );
+
+    private static boolean comparePassword(String rawOrEncodedPassword, String password) {
+        if (PasswordUtil.isEncoded(rawOrEncodedPassword)) {
+            return rawOrEncodedPassword.equals(password);
+        } else if (!PasswordUtil.isMatch(rawOrEncodedPassword, password)) {
+            LOG.error("Password " + password + " doesn't match encoded " + password);
+            return false;
+        }
+        return true;
+    }
+
 }
\ No newline at end of file
