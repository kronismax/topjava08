Index: src/main/java/ru/javawebinar/topjava/web/user/AdminAjaxController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/AdminAjaxController.java	(date 1477861310000)
+++ src/main/java/ru/javawebinar/topjava/web/user/AdminAjaxController.java	(revision )
@@ -1,11 +1,15 @@
 package ru.javawebinar.topjava.web.user;
 
+import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.validation.BindingResult;
 import org.springframework.web.bind.annotation.*;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.to.UserTo;
 import ru.javawebinar.topjava.util.UserUtil;
 
+import javax.validation.Valid;
 import java.util.List;
 
 /**
@@ -31,12 +35,18 @@
     }
 
     @PostMapping
-    public void createOrUpdate(UserTo userTo) {
+    public ResponseEntity<String> createOrUpdate(@Valid UserTo userTo, BindingResult result) {
+        if (result.hasErrors()) {
+            StringBuilder sb = new StringBuilder();
+            result.getFieldErrors().forEach(fe -> sb.append(fe.getField()).append(" ").append(fe.getDefaultMessage()).append("<br>"));
+            return new ResponseEntity<>(sb.toString(), HttpStatus.UNPROCESSABLE_ENTITY);
+        }
         if (userTo.isNew()) {
             super.create(UserUtil.createNewFromTo(userTo));
         } else {
             super.update(userTo);
         }
+        return new ResponseEntity<>(HttpStatus.OK);
     }
 
     @PostMapping(value = "/{id}")
Index: src/main/webapp/resources/js/datatablesUtil.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/resources/js/datatablesUtil.js	(date 1477861310000)
+++ src/main/webapp/resources/js/datatablesUtil.js	(revision )
@@ -91,7 +91,7 @@
 function failNoty(event, jqXHR, options, jsExc) {
     closeNoty();
     failedNote = noty({
-        text: 'Failed: ' + jqXHR.statusText + "<br>",
+        text: 'Failed: ' + jqXHR.statusText + "<br>" + jqXHR.responseJSON,
         type: 'error',
         layout: 'bottomRight'
     });
Index: src/main/java/ru/javawebinar/topjava/to/UserTo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/to/UserTo.java	(date 1477861310000)
+++ src/main/java/ru/javawebinar/topjava/to/UserTo.java	(revision )
@@ -1,12 +1,21 @@
 package ru.javawebinar.topjava.to;
 
+import org.hibernate.validator.constraints.Email;
+import org.hibernate.validator.constraints.NotEmpty;
+
+import javax.validation.constraints.Size;
+
 public class UserTo {
     private Integer id;
 
+    @NotEmpty
     private String name;
 
+    @Email
+    @NotEmpty
     private String email;
 
+    @Size(min = 5, max = 64, message = " must between 5 and 64 characters")
     private String password;
 
     public UserTo() {
