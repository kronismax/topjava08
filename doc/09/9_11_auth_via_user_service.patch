Index: src/main/java/ru/javawebinar/topjava/AuthorizedUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/AuthorizedUser.java	(date 1477911211000)
+++ src/main/java/ru/javawebinar/topjava/AuthorizedUser.java	(revision )
@@ -1,24 +1,56 @@
 package ru.javawebinar.topjava;
 
-import ru.javawebinar.topjava.model.BaseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.to.UserTo;
 import ru.javawebinar.topjava.util.UserUtil;
 
+import static java.util.Objects.requireNonNull;
+
 /**
  * GKislin
  * 06.03.2015.
  */
-public class AuthorizedUser {
-    public static int id = BaseEntity.START_SEQ;
+public class AuthorizedUser extends org.springframework.security.core.userdetails.User {
+    private static final long serialVersionUID = 1L;
 
-    public static int id() {
-        return id;
+    private final UserTo userTo;
+
+    public AuthorizedUser(User user) {
+        super(user.getEmail(), user.getPassword(), user.isEnabled(), true, true, true, user.getRoles());
+        this.userTo = UserUtil.asTo(user);
     }
 
-    public static void setId(int id) {
-        AuthorizedUser.id = id;
+    public static AuthorizedUser safeGet() {
+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+        if (auth == null) {
+            return null;
-    }
+        }
+        Object principal = auth.getPrincipal();
+        return (principal instanceof AuthorizedUser) ? (AuthorizedUser) principal : null;
+    }
 
+    public static AuthorizedUser get() {
+        AuthorizedUser user = safeGet();
+        requireNonNull(user, "No authorized user found");
+        return user;
+    }
+
+    public static int id() {
+        return get().userTo.getId();
+    }
+
     public static int getCaloriesPerDay() {
-        return UserUtil.DEFAULT_CALORIES_PER_DAY;
+        return get().userTo.getCaloriesPerDay();
+    }
+
+    public UserTo getUserTo() {
+        return userTo;
+    }
+
+    @Override
+    public String toString() {
+        return userTo.toString();
     }
 }
Index: src/main/java/ru/javawebinar/topjava/util/UserUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(date 1477911211000)
+++ src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(revision )
@@ -15,6 +15,10 @@
         return new User(null, newUser.getName(), newUser.getEmail().toLowerCase(), newUser.getPassword(), Role.ROLE_USER);
     }
 
+    public static UserTo asTo(User user) {
+        return new UserTo(user.getId(), user.getName(), user.getEmail(), user.getPassword(), user.getCaloriesPerDay());
+    }
+
     public static User updateFromTo(User user, UserTo userTo) {
         user.setName(userTo.getName());
         user.setEmail(userTo.getEmail().toLowerCase());
Index: src/main/java/ru/javawebinar/topjava/model/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/Role.java	(date 1477911211000)
+++ src/main/java/ru/javawebinar/topjava/model/Role.java	(revision )
@@ -1,10 +1,17 @@
 package ru.javawebinar.topjava.model;
 
+import org.springframework.security.core.GrantedAuthority;
+
 /**
  * User: gkislin
  * Date: 22.08.2014
  */
-public enum Role {
+public enum Role implements GrantedAuthority {
     ROLE_USER,
-    ROLE_ADMIN
+    ROLE_ADMIN;
+
+    @Override
+    public String getAuthority() {
+        return name();
+    }
 }
Index: src/main/resources/spring/spring-security.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-security.xml	(date 1477911211000)
+++ src/main/resources/spring/spring-security.xml	(revision )
@@ -30,11 +30,18 @@
     </http>
 
     <authentication-manager>
-        <authentication-provider>
+        <authentication-provider user-service-ref="userService">
+            <!--
+                        <jdbc-user-service data-source-ref="dataSource"
+                                           users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
+                                           authorities-by-username-query="
+                                                                   SELECT u.email, r.role FROM users u, user_roles r WHERE u.id = r.user_id AND u.email = ?"
+                        />
-            <user-service>
-                <user name="user@yandex.ru" password="password" authorities="ROLE_USER"/>
-                <user name="admin@gmail.com" password="admin" authorities="ROLE_ADMIN"/>
-            </user-service>
+                        <user-service>
+                            <user name="user@yandex.ru" password="password" authorities="ROLE_USER"/>
+                            <user name="admin@gmail.com" password="admin" authorities="ROLE_ADMIN"/>
+                        </user-service>
+            -->
         </authentication-provider>
     </authentication-manager>
 </beans:beans>
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(date 1477911211000)
+++ src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(revision )
@@ -3,9 +3,12 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cache.annotation.CacheEvict;
 import org.springframework.cache.annotation.Cacheable;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.Assert;
+import ru.javawebinar.topjava.AuthorizedUser;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.repository.UserRepository;
 import ru.javawebinar.topjava.to.UserTo;
@@ -19,8 +22,8 @@
  * GKislin
  * 06.03.2015.
  */
-@Service
-public class UserServiceImpl implements UserService {
+@Service("userService")
+public class UserServiceImpl implements UserService, UserDetailsService {
 
     @Autowired
     private UserRepository repository;
@@ -83,6 +86,15 @@
         User user = get(id);
         user.setEnabled(enabled);
         repository.save(user);
+    }
+
+    @Override
+    public AuthorizedUser loadUserByUsername(String email) throws UsernameNotFoundException {
+        User u = repository.getByEmail(email);
+        if (u == null) {
+            throw new UsernameNotFoundException("User " + email + " is not found");
+        }
+        return new AuthorizedUser(u);
     }
 
     @Override
Index: src/main/java/ru/javawebinar/topjava/to/UserTo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/to/UserTo.java	(date 1477911211000)
+++ src/main/java/ru/javawebinar/topjava/to/UserTo.java	(revision )
@@ -2,10 +2,16 @@
 
 import org.hibernate.validator.constraints.Email;
 import org.hibernate.validator.constraints.NotEmpty;
+import org.hibernate.validator.constraints.Range;
+import ru.javawebinar.topjava.util.UserUtil;
 
+import javax.validation.constraints.NotNull;
 import javax.validation.constraints.Size;
+import java.io.Serializable;
 
-public class UserTo {
+public class UserTo implements Serializable {
+    private static final long serialVersionUID = 1L;
+
     private Integer id;
 
     @NotEmpty
@@ -18,14 +24,19 @@
     @Size(min = 5, max = 64, message = " must between 5 and 64 characters")
     private String password;
 
+    @Range(min = 100, max = 5000)
+    @NotNull(message = " must not be empty")
+    private Integer caloriesPerDay = UserUtil.DEFAULT_CALORIES_PER_DAY;
+
     public UserTo() {
     }
 
-    public UserTo(Integer id, String name, String email, String password) {
+    public UserTo(Integer id, String name, String email, String password, int caloriesPerDay) {
         this.id = id;
         this.name = name;
         this.email = email;
         this.password = password;
+        this.caloriesPerDay = caloriesPerDay;
     }
 
     public Integer getId() {
@@ -64,12 +75,17 @@
         return id == null;
     }
 
+    public int getCaloriesPerDay() {
+        return caloriesPerDay;
+    }
+
     @Override
     public String toString() {
         return "UserTo{" +
                 "id=" + id +
                 ", name='" + name + '\'' +
                 ", email='" + email + '\'' +
+                ", caloriesPerDay='" + caloriesPerDay + '\'' +
                 '}';
     }
 }
