Index: src/test/java/ru/javawebinar/topjava/MealTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/MealTestData.java	(revision )
+++ src/test/java/ru/javawebinar/topjava/MealTestData.java	(revision )
@@ -0,0 +1,14 @@
+package ru.javawebinar.topjava;
+
+import ru.javawebinar.topjava.matcher.ModelMatcher;
+import ru.javawebinar.topjava.model.Meal;
+
+/**
+ * GKislin
+ * 13.03.2015.
+ */
+public class MealTestData {
+
+    public static final ModelMatcher<Meal> MATCHER = new ModelMatcher<>();
+
+}
Index: src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcMealRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcMealRepositoryImpl.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcMealRepositoryImpl.java	(revision )
@@ -0,0 +1,42 @@
+package ru.javawebinar.topjava.repository.jdbc;
+
+import org.springframework.stereotype.Repository;
+import ru.javawebinar.topjava.model.Meal;
+import ru.javawebinar.topjava.repository.MealRepository;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
+/**
+ * User: gkislin
+ * Date: 26.08.2014
+ */
+
+@Repository
+public class JdbcMealRepositoryImpl implements MealRepository {
+
+    @Override
+    public Meal save(Meal Meal, int userId) {
+        return null;
+    }
+
+    @Override
+    public boolean delete(int id, int userId) {
+        return false;
+    }
+
+    @Override
+    public Meal get(int id, int userId) {
+        return null;
+    }
+
+    @Override
+    public List<Meal> getAll(int userId) {
+        return null;
+    }
+
+    @Override
+    public List<Meal> getBetween(LocalDateTime startDate, LocalDateTime endDate, int userId) {
+        return null;
+    }
+}
Index: src/test/java/ru/javawebinar/topjava/service/UserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/UserServiceTest.java	(revision )
+++ src/test/java/ru/javawebinar/topjava/service/UserServiceTest.java	(revision )
@@ -0,0 +1,94 @@
+package ru.javawebinar.topjava.service;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataAccessException;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import ru.javawebinar.topjava.model.Role;
+import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.util.DbPopulator;
+import ru.javawebinar.topjava.util.exception.NotFoundException;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+
+import static ru.javawebinar.topjava.UserTestData.*;
+
+@ContextConfiguration({
+        "classpath:spring/spring-app.xml",
+        "classpath:spring/spring-db.xml"
+})
+@RunWith(SpringJUnit4ClassRunner.class)
+public class UserServiceTest {
+
+    @Autowired
+    protected UserService service;
+
+    @Autowired
+    private DbPopulator dbPopulator;
+
+    @Before
+    public void setUp() throws Exception {
+        dbPopulator.execute();
+    }
+
+    @Test
+    public void testSave() throws Exception {
+        User newUser = new User(null, "New", "new@gmail.com", "newPass", 1555, false, Collections.singleton(Role.ROLE_USER));
+        User created = service.save(newUser);
+        newUser.setId(created.getId());
+        MATCHER.assertCollectionEquals(Arrays.asList(ADMIN, newUser, USER), service.getAll());
+    }
+
+    @Test(expected = DataAccessException.class)
+    public void testDuplicateMailSave() throws Exception {
+        service.save(new User(null, "Duplicate", "user@yandex.ru", "newPass", Role.ROLE_USER));
+    }
+
+    @Test
+    public void testDelete() throws Exception {
+        service.delete(USER_ID);
+        MATCHER.assertCollectionEquals(Collections.singletonList(ADMIN), service.getAll());
+    }
+
+    @Test(expected = NotFoundException.class)
+    public void testNotFoundDelete() throws Exception {
+        service.delete(1);
+    }
+
+    @Test
+    public void testGet() throws Exception {
+        User user = service.get(USER_ID);
+        MATCHER.assertEquals(USER, user);
+    }
+
+    @Test(expected = NotFoundException.class)
+    public void testGetNotFound() throws Exception {
+        service.get(1);
+    }
+
+    @Test
+    public void testGetByEmail() throws Exception {
+        User user = service.getByEmail("user@yandex.ru");
+        MATCHER.assertEquals(USER, user);
+    }
+
+    @Test
+    public void testGetAll() throws Exception {
+        Collection<User> all = service.getAll();
+        MATCHER.assertCollectionEquals(Arrays.asList(ADMIN, USER), all);
+    }
+
+    @Test
+    public void testUpdate() throws Exception {
+        User updated = new User(USER);
+        updated.setName("UpdatedName");
+        updated.setCaloriesPerDay(330);
+        service.update(updated);
+        MATCHER.assertEquals(updated, service.get(USER_ID));
+    }
+}
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/matcher/ModelMatcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/matcher/ModelMatcher.java	(revision )
+++ src/test/java/ru/javawebinar/topjava/matcher/ModelMatcher.java	(revision )
@@ -0,0 +1,72 @@
+package ru.javawebinar.topjava.matcher;
+
+import org.junit.Assert;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.stream.Collectors;
+
+/**
+ * GKislin
+ * 06.01.2015.
+ *
+ * This class wrap every entity by Wrapper before assertEquals in order to compare them by comparator
+ * Default comparator compare by String.valueOf(entity)
+ *
+ * @param <T> : Entity
+ */
+public class ModelMatcher<T> {
+    public interface Comparator<T> {
+        boolean compare(T expected, T actual);
+    }
+
+    private static final Comparator DEFAULT_COMPARATOR =
+            (Object expected, Object actual) -> String.valueOf(expected).equals(String.valueOf(actual));
+
+    private Comparator<T> comparator;
+
+    public ModelMatcher() {
+        this((Comparator<T>) DEFAULT_COMPARATOR);
+    }
+
+    public ModelMatcher(Comparator<T> comparator) {
+        this.comparator = comparator;
+    }
+
+    private class Wrapper {
+        private T entity;
+
+        private Wrapper(T entity) {
+            this.entity = entity;
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            Wrapper that = (Wrapper) o;
+            return entity != null ? comparator.compare(entity, that.entity) : that.entity == null;
+        }
+
+        @Override
+        public String toString() {
+            return String.valueOf(entity);
+        }
+    }
+
+    public void assertEquals(T expected, T actual) {
+        Assert.assertEquals(wrap(expected), wrap(actual));
+    }
+
+    public void assertCollectionEquals(Collection<T> expected, Collection<T> actual) {
+        Assert.assertEquals(wrap(expected), wrap(actual));
+    }
+
+    public Wrapper wrap(T entity) {
+        return new Wrapper(entity);
+    }
+
+    public List<Wrapper> wrap(Collection<T> collection) {
+        return collection.stream().map(this::wrap).collect(Collectors.toList());
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/util/DbPopulator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/DbPopulator.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/util/DbPopulator.java	(revision )
@@ -0,0 +1,28 @@
+package ru.javawebinar.topjava.util;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.core.io.DefaultResourceLoader;
+import org.springframework.core.io.ResourceLoader;
+import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;
+import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
+
+import javax.sql.DataSource;
+
+/**
+ * User: gkislin
+ * Date: 26.08.2014
+ */
+public class DbPopulator extends ResourceDatabasePopulator {
+    private static final ResourceLoader RESOURCE_LOADER = new DefaultResourceLoader();
+
+    @Autowired
+    private DataSource dataSource;
+
+    public DbPopulator(String scriptLocation) {
+        super(RESOURCE_LOADER.getResource(scriptLocation));
+    }
+
+    public void execute() {
+        DatabasePopulatorUtils.execute(this, dataSource);
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/User.java	(date 1474376579000)
+++ src/main/java/ru/javawebinar/topjava/model/User.java	(revision )
@@ -27,6 +27,10 @@
     public User() {
     }
 
+    public User(User u) {
+        this(u.getId(), u.getName(), u.getEmail(), u.getPassword(), u.getCaloriesPerDay(), u.isEnabled(), u.getRoles());
+    }
+
     public User(Integer id, String name, String email, String password, Role role, Role... roles) {
         this(id, name, email, password, MealsUtil.DEFAULT_CALORIES_PER_DAY, true, EnumSet.of(role, roles));
     }
Index: src/test/java/ru/javawebinar/topjava/UserTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/UserTestData.java	(date 1474376579000)
+++ src/test/java/ru/javawebinar/topjava/UserTestData.java	(revision )
@@ -1,16 +1,33 @@
 package ru.javawebinar.topjava;
 
+import ru.javawebinar.topjava.matcher.ModelMatcher;
 import ru.javawebinar.topjava.model.Role;
 import ru.javawebinar.topjava.model.User;
 
+import java.util.Objects;
+
+import static ru.javawebinar.topjava.model.BaseEntity.START_SEQ;
+
 /**
  * GKislin
  * 24.09.2015.
  */
 public class UserTestData {
-    public static final int USER_ID = 1;
-    public static final int ADMIN_ID = 2;
+    public static final int USER_ID = START_SEQ;
+    public static final int ADMIN_ID = START_SEQ + 1;
 
     public static final User USER = new User(USER_ID, "User", "user@yandex.ru", "password", Role.ROLE_USER);
     public static final User ADMIN = new User(ADMIN_ID, "Admin", "admin@gmail.com", "admin", Role.ROLE_ADMIN);
+
+    public static final ModelMatcher<User> MATCHER = new ModelMatcher<>(
+            (expected, actual) -> expected == actual ||
+                    (Objects.equals(expected.getPassword(), actual.getPassword())
+                            && Objects.equals(expected.getId(), actual.getId())
+                            && Objects.equals(expected.getName(), actual.getName())
+                            && Objects.equals(expected.getEmail(), actual.getEmail())
+                            && Objects.equals(expected.getCaloriesPerDay(), actual.getCaloriesPerDay())
+                            && Objects.equals(expected.isEnabled(), actual.isEnabled())
+//                            && Objects.equals(expected.getRoles(), actual.getRoles())
+                    )
+    );
-}
+}
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/model/BaseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/BaseEntity.java	(date 1474376579000)
+++ src/main/java/ru/javawebinar/topjava/model/BaseEntity.java	(revision )
@@ -5,6 +5,8 @@
  * Date: 22.08.2014
  */
 public class BaseEntity {
+    public static final int START_SEQ = 100000;
+
     protected Integer id;
 
     public BaseEntity() {
@@ -25,4 +27,25 @@
     public boolean isNew() {
         return (this.id == null);
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        BaseEntity that = (BaseEntity) o;
+        if (id == null || that.id == null) {
+            return false;
+        }
+        return id.equals(that.id);
+    }
+
+    @Override
+    public int hashCode() {
+        return (id == null) ? 0 : id;
+    }
+
 }
Index: src/main/resources/spring/spring-db.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-db.xml	(date 1474376579000)
+++ src/main/resources/spring/spring-db.xml	(revision )
@@ -6,6 +6,10 @@
 
     <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>
 
+    <bean class="ru.javawebinar.topjava.util.DbPopulator">
+        <constructor-arg name="scriptLocation" value="classpath:db/populateDB.sql"/>
+    </bean>
+
     <!--no pooling-->
     <bean id="dataSource"
           class="org.springframework.jdbc.datasource.DriverManagerDataSource">
\ No newline at end of file
Index: src/main/resources/spring/spring-app.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-app.xml	(date 1474376579000)
+++ src/main/resources/spring/spring-app.xml	(revision )
@@ -14,7 +14,7 @@
 
     <context:annotation-config/>
 
-    <context:component-scan base-package="ru.javawebinar.**.repository"/>
+    <context:component-scan base-package="ru.javawebinar.**.repository.jdbc"/>
 
     <context:component-scan base-package="ru.javawebinar.**.service"/>
 
\ No newline at end of file
