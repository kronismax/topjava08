Index: src/main/java/ru/javawebinar/topjava/model/MealWithExceed.java
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/MealWithExceed.java	(date 1474368749000)
+++ src/main/java/ru/javawebinar/topjava/to/MealWithExceed.java	(revision )
@@ -1,4 +1,4 @@
-package ru.javawebinar.topjava.model;
+package ru.javawebinar.topjava.to;
 
 import java.time.LocalDateTime;
 
Index: src/main/java/ru/javawebinar/topjava/model/Meal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/Meal.java	(date 1474368749000)
+++ src/main/java/ru/javawebinar/topjava/model/Meal.java	(revision )
@@ -8,9 +8,7 @@
  * GKislin
  * 11.01.2015.
  */
-public class Meal {
-    private Integer id;
-
+public class Meal extends BaseEntity {
     private final LocalDateTime dateTime;
 
     private final String description;
@@ -22,20 +20,12 @@
     }
 
     public Meal(Integer id, LocalDateTime dateTime, String description, int calories) {
-        this.id = id;
+        super(id);
         this.dateTime = dateTime;
         this.description = description;
         this.calories = calories;
     }
 
-    public Integer getId() {
-        return id;
-    }
-
-    public void setId(Integer id) {
-        this.id = id;
-    }
-
     public LocalDateTime getDateTime() {
         return dateTime;
     }
@@ -54,10 +44,6 @@
 
     public LocalTime getTime() {
         return dateTime.toLocalTime();
-    }
-
-    public boolean isNew() {
-        return id == null;
     }
 
     @Override
Index: src/main/java/ru/javawebinar/topjava/util/MealsUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/MealsUtil.java	(date 1474368749000)
+++ src/main/java/ru/javawebinar/topjava/util/MealsUtil.java	(revision )
@@ -1,7 +1,7 @@
 package ru.javawebinar.topjava.util;
 
 import ru.javawebinar.topjava.model.Meal;
-import ru.javawebinar.topjava.model.MealWithExceed;
+import ru.javawebinar.topjava.to.MealWithExceed;
 
 import java.time.LocalDate;
 import java.time.LocalDateTime;
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/SpringMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/SpringMain.java	(date 1474368749000)
+++ src/main/java/ru/javawebinar/topjava/SpringMain.java	(revision )
@@ -4,9 +4,15 @@
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 import ru.javawebinar.topjava.model.Role;
 import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.to.MealWithExceed;
+import ru.javawebinar.topjava.web.meal.MealRestController;
 import ru.javawebinar.topjava.web.user.AdminRestController;
 
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.time.Month;
 import java.util.Arrays;
+import java.util.List;
 
 /**
  * User: gkislin
@@ -19,6 +25,14 @@
             System.out.println("Bean definition names: " + Arrays.toString(appCtx.getBeanDefinitionNames()));
             AdminRestController adminUserController = appCtx.getBean(AdminRestController.class);
             adminUserController.create(new User(1, "userName", "email", "password", Role.ROLE_ADMIN));
+            System.out.println();
+
+            MealRestController mealController = appCtx.getBean(MealRestController.class);
+            List<MealWithExceed> filteredMealsWithExceeded =
+                    mealController.getBetween(
+                            LocalDate.of(2015, Month.MAY, 30), LocalTime.of(7, 0),
+                            LocalDate.of(2015, Month.MAY, 31), LocalTime.of(11, 0));
+            filteredMealsWithExceeded.forEach(System.out::println);
         }
     }
 }
Index: src/main/java/ru/javawebinar/topjava/repository/mock/InMemoryMealRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/mock/InMemoryMealRepositoryImpl.java	(date 1474368749000)
+++ src/main/java/ru/javawebinar/topjava/repository/mock/InMemoryMealRepositoryImpl.java	(revision )
@@ -1,5 +1,6 @@
 package ru.javawebinar.topjava.repository.mock;
 
+import org.springframework.stereotype.Repository;
 import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.repository.MealRepository;
 import ru.javawebinar.topjava.util.MealsUtil;
@@ -19,6 +20,7 @@
  * GKislin
  * 15.09.2015.
  */
+@Repository
 public class InMemoryMealRepositoryImpl implements MealRepository {
 
     private static final Comparator<Meal> MEAL_COMPARATOR = Comparator.comparing(Meal::getDateTime).reversed();
Index: src/main/java/ru/javawebinar/topjava/service/MealServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/MealServiceImpl.java	(date 1474368749000)
+++ src/main/java/ru/javawebinar/topjava/service/MealServiceImpl.java	(revision )
@@ -1,13 +1,51 @@
 package ru.javawebinar.topjava.service;
 
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.repository.MealRepository;
+import ru.javawebinar.topjava.util.exception.ExceptionUtil;
 
+import java.time.LocalDateTime;
+import java.util.Collection;
+
 /**
  * GKislin
  * 06.03.2015.
  */
+@Service
 public class MealServiceImpl implements MealService {
 
+    @Autowired
     private MealRepository repository;
 
+    @Override
+    public Meal get(int id, int userId) {
+        return ExceptionUtil.checkNotFoundWithId(repository.get(id, userId), id);
+    }
+
+    @Override
+    public void delete(int id, int userId) {
+        ExceptionUtil.checkNotFoundWithId(repository.delete(id, userId), id);
+    }
+
+    @Override
+    public Collection<Meal> getBetweenDateTimes(LocalDateTime startDateTime, LocalDateTime endDateTime, int userId) {
+        return repository.getBetween(startDateTime, endDateTime, userId);
+    }
+
+    @Override
+    public Collection<Meal> getAll(int userId) {
+        return repository.getAll(userId);
+    }
+
+    @Override
+    public Meal update(Meal meal, int userId) {
+        return ExceptionUtil.checkNotFoundWithId(repository.save(meal, userId), meal.getId());
+    }
+
+    @Override
+    public Meal save(Meal meal, int userId) {
+        return repository.save(meal, userId);
+    }
 }
Index: src/main/java/ru/javawebinar/topjava/service/MealService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/MealService.java	(date 1474368749000)
+++ src/main/java/ru/javawebinar/topjava/service/MealService.java	(revision )
@@ -1,8 +1,31 @@
 package ru.javawebinar.topjava.service;
 
+import ru.javawebinar.topjava.model.Meal;
+import ru.javawebinar.topjava.util.exception.NotFoundException;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.util.Collection;
+
 /**
  * GKislin
  * 15.06.2015.
  */
 public interface MealService {
+    Meal get(int id, int userId) throws NotFoundException;
+
+    void delete(int id, int userId) throws NotFoundException;
+
+    default Collection<Meal> getBetweenDates(LocalDate startDate, LocalDate endDate, int userId) {
+        return getBetweenDateTimes(LocalDateTime.of(startDate, LocalTime.MIN), LocalDateTime.of(endDate, LocalTime.MAX), userId);
+    }
+
+    Collection<Meal> getBetweenDateTimes(LocalDateTime startDateTime, LocalDateTime endDateTime, int userId);
+
+    Collection<Meal> getAll(int userId);
+
+    Meal update(Meal meal, int userId) throws NotFoundException;
+
+    Meal save(Meal meal, int userId);
 }
Index: src/main/webapp/mealList.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/mealList.jsp	(date 1474368749000)
+++ src/main/webapp/mealList.jsp	(revision )
@@ -32,7 +32,7 @@
         </tr>
         </thead>
         <c:forEach items="${mealList}" var="meal">
-            <jsp:useBean id="meal" scope="page" type="ru.javawebinar.topjava.model.MealWithExceed"/>
+            <jsp:useBean id="meal" scope="page" type="ru.javawebinar.topjava.to.MealWithExceed"/>
             <tr class="${meal.exceed ? 'exceeded' : 'normal'}">
                 <td>
                         <%--${meal.dateTime.toLocalDate()} ${meal.dateTime.toLocalTime()}--%>
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/util/TimeUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/TimeUtil.java	(date 1474368749000)
+++ src/main/java/ru/javawebinar/topjava/util/TimeUtil.java	(revision )
@@ -1,5 +1,6 @@
 package ru.javawebinar.topjava.util;
 
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 
@@ -9,6 +10,9 @@
  */
 public class TimeUtil {
     public static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
+
+    public static final LocalDate MIN_DATE = LocalDate.of(1, 1, 1);
+    public static final LocalDate MAX_DATE = LocalDate.of(3000, 1, 1);
 
     public static <T extends Comparable<? super T>> boolean isBetween(T value, T start, T end) {
         return value.compareTo(start) >= 0 && value.compareTo(end) <= 0;
Index: src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java	(date 1474368749000)
+++ src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java	(revision )
@@ -1,12 +1,72 @@
 package ru.javawebinar.topjava.web.meal;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Controller;
+import ru.javawebinar.topjava.AuthorizedUser;
+import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.service.MealService;
+import ru.javawebinar.topjava.to.MealWithExceed;
+import ru.javawebinar.topjava.util.MealsUtil;
+import ru.javawebinar.topjava.util.TimeUtil;
 
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.util.List;
+
 /**
  * GKislin
  * 06.03.2015.
  */
+@Controller
 public class MealRestController {
+    private static final Logger LOG = LoggerFactory.getLogger(MealRestController.class);
+
+    @Autowired
     private MealService service;
 
+    public Meal get(int id) {
+        int userId = AuthorizedUser.id();
+        LOG.info("get meal {} for User {}", id, userId);
+        return service.get(id, userId);
+    }
+
+    public void delete(int id) {
+        int userId = AuthorizedUser.id();
+        LOG.info("delete meal {} for User {}", id, userId);
+        service.delete(id, userId);
+    }
+
+    public List<MealWithExceed> getAll() {
+        int userId = AuthorizedUser.id();
+        LOG.info("getAll for User {}", userId);
+        return MealsUtil.getWithExceeded(service.getAll(userId), AuthorizedUser.getCaloriesPerDay());
+    }
+
+    public void update(Meal meal, int id) {
+        meal.setId(id);
+        int userId = AuthorizedUser.id();
+        LOG.info("update {} for User {}", meal, userId);
+        service.update(meal, userId);
+    }
+
+    public Meal create(Meal meal) {
+        meal.setId(null);
+        int userId = AuthorizedUser.id();
+        LOG.info("create {} for User {}", meal, userId);
+        return service.save(meal, userId);
+    }
+
+    public List<MealWithExceed> getBetween(LocalDate startDate, LocalTime startTime, LocalDate endDate, LocalTime endTime) {
+        int userId = AuthorizedUser.id();
+        LOG.info("getBetween dates {} - {} for time {} - {} for User {}", startDate, endDate, startTime, endTime, userId);
+
+        return MealsUtil.getFilteredWithExceeded(
+                service.getBetweenDates(startDate != null ? startDate : TimeUtil.MIN_DATE, endDate != null ? endDate : TimeUtil.MAX_DATE, userId),
+                startTime != null ? startTime : LocalTime.MIN,
+                endTime != null ? endTime : LocalTime.MAX,
+                AuthorizedUser.getCaloriesPerDay()
+        );
+    }
 }
