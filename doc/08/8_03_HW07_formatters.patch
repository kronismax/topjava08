Index: src/main/java/ru/javawebinar/topjava/util/converter/DateTimeFormatters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/converter/DateTimeFormatters.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/util/converter/DateTimeFormatters.java	(revision )
@@ -0,0 +1,42 @@
+package ru.javawebinar.topjava.util.converter;
+
+import org.springframework.format.Formatter;
+import ru.javawebinar.topjava.util.TimeUtil;
+
+import java.text.ParseException;
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.time.format.DateTimeFormatter;
+import java.util.Locale;
+
+/**
+ * gkislin
+ * 25.10.2016
+ */
+public class DateTimeFormatters {
+    public static class LocalDateFormatter implements Formatter<LocalDate> {
+
+        @Override
+        public LocalDate parse(String text, Locale locale) throws ParseException {
+            return TimeUtil.parseLocalDate(text);
+        }
+
+        @Override
+        public String print(LocalDate lt, Locale locale) {
+            return lt.format(DateTimeFormatter.ISO_LOCAL_DATE);
+        }
+    }
+
+    public static class LocalTimeFormatter implements Formatter<LocalTime> {
+
+        @Override
+        public LocalTime parse(String text, Locale locale) throws ParseException {
+            return TimeUtil.parseLocalTime(text);
+        }
+
+        @Override
+        public String print(LocalTime lt, Locale locale) {
+            return lt.format(DateTimeFormatter.ISO_LOCAL_TIME);
+        }
+    }
+}
Index: src/main/resources/spring/spring-mvc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-mvc.xml	(date 1477405531000)
+++ src/main/resources/spring/spring-mvc.xml	(revision )
@@ -7,7 +7,7 @@
 
     <bean class="ru.javawebinar.topjava.web.json.JacksonObjectMapper" id="objectMapper" factory-method="getMapper"/>
 
-    <mvc:annotation-driven>
+    <mvc:annotation-driven conversion-service="conversionService">
         <mvc:message-converters>
             <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                 <property name="objectMapper" ref="objectMapper"/>
@@ -22,6 +22,15 @@
             </bean>
         </mvc:message-converters>
     </mvc:annotation-driven>
+
+    <bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean" id="conversionService">
+        <property name="formatters">
+            <set>
+                <bean class="ru.javawebinar.topjava.util.converter.DateTimeFormatters.LocalTimeFormatter"/>
+                <bean class="ru.javawebinar.topjava.util.converter.DateTimeFormatters.LocalDateFormatter"/>
+            </set>
+        </property>
+    </bean>
 
     <context:component-scan base-package="ru.javawebinar.**.web"/>
 
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/web/meal/MealRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/meal/MealRestControllerTest.java	(date 1477405531000)
+++ src/test/java/ru/javawebinar/topjava/web/meal/MealRestControllerTest.java	(revision )
@@ -87,4 +87,26 @@
                         MealsUtil.createWithExceed(MEAL4, true),
                         MealsUtil.createWithExceed(MEAL1, false)));
     }
+
+    @Test
+    public void testFilter() throws Exception {
+        mockMvc.perform(get(REST_URL + "filter")
+                .param("startDate", "2015-05-30").param("startTime", "07:00")
+                .param("endDate", "2015-05-31").param("endTime", "11:00"))
+                .andExpect(status().isOk())
+                .andDo(print())
+                .andExpect(MATCHER_WITH_EXCEED.contentListMatcher(
+                        MealsUtil.createWithExceed(MEAL4, true),
+                        MealsUtil.createWithExceed(MEAL1, false)));
+    }
+
+
+    @Test
+    public void testFilterAll() throws Exception {
+        mockMvc.perform(get(REST_URL + "filter?startDate=&endTime="))
+                .andExpect(status().isOk())
+                .andDo(print())
+                .andExpect(MATCHER_WITH_EXCEED.contentListMatcher(
+                        MealsUtil.getWithExceeded(Arrays.asList(MEAL6, MEAL5, MEAL4, MEAL3, MEAL2, MEAL1), USER.getCaloriesPerDay())));
+    }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java	(date 1477405531000)
+++ src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java	(revision )
@@ -9,7 +9,9 @@
 import ru.javawebinar.topjava.to.MealWithExceed;
 
 import java.net.URI;
+import java.time.LocalDate;
 import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.List;
 
 @RestController
@@ -53,5 +55,12 @@
             @RequestParam(value = "startDateTime") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDateTime,
             @RequestParam(value = "endDateTime") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDateTime) {
         return super.getBetween(startDateTime.toLocalDate(), startDateTime.toLocalTime(), endDateTime.toLocalDate(), endDateTime.toLocalTime());
+    }
+
+    @RequestMapping(value = "/filter", method = RequestMethod.GET)
+    public List<MealWithExceed> getBetween(
+            @RequestParam(value = "startDate", required = false) LocalDate startDate, @RequestParam(value = "startTime", required = false) LocalTime startTime,
+            @RequestParam(value = "endDate", required = false) LocalDate endDate, @RequestParam(value = "endTime", required = false) LocalTime endTime) {
+        return super.getBetween(startDate, startTime, endDate, endTime);
     }
 }
\ No newline at end of file
