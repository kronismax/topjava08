Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java	(revision )
@@ -33,4 +33,6 @@
 
     User getByEmail(String email);
 
+    @Query("SELECT u FROM User u LEFT JOIN FETCH u.meals WHERE u.id = ?1")
+    User getWithMeals(int id);
 }
Index: src/main/java/ru/javawebinar/topjava/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserService.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/service/UserService.java	(revision )
@@ -23,6 +23,8 @@
     List<User> getAll();
 
     void update(User user);
-    
+
     void evictCache();
+
+    User getWithMeals(int id);
 }
Index: src/main/java/ru/javawebinar/topjava/service/MealServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/MealServiceImpl.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/service/MealServiceImpl.java	(revision )
@@ -53,4 +53,16 @@
         Assert.notNull(meal, "meal must not be null");
         return repository.save(meal, userId);
     }
+
+//    @Autowired
+//    private UserRepository userRepository;
+
+//    @Transactional
+    public Meal getWithUser(int id, int userId) {
+//        Meal meal = get(id, userId);
+//        meal.setUser(userRepository.get(userId));
+//        return meal;
+        return ExceptionUtil.checkNotFoundWithId(repository.getWithUser(id, userId), id);
+    }
+
 }
Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaMealRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaMealRepositoryImpl.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaMealRepositoryImpl.java	(revision )
@@ -52,4 +52,9 @@
     public List<Meal> getBetween(LocalDateTime startDate, LocalDateTime endDate, int userId) {
         return crudRepository.getBetween(startDate, endDate, userId);
     }
+
+    @Override
+    public Meal getWithUser(int id, int userId) {
+        return crudRepository.getWithUser(id, userId);
+    }
 }
Index: src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaUserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaUserServiceTest.java	(date 1476283161000)
+++ src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaUserServiceTest.java	(revision )
@@ -1,10 +1,26 @@
 package ru.javawebinar.topjava.service.datajpa;
 
+import org.junit.Test;
 import org.springframework.test.context.ActiveProfiles;
+import ru.javawebinar.topjava.MealTestData;
+import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.service.AbstractUserServiceTest;
+import ru.javawebinar.topjava.util.exception.NotFoundException;
 
 import static ru.javawebinar.topjava.Profiles.DATAJPA;
+import static ru.javawebinar.topjava.UserTestData.*;
 
 @ActiveProfiles(DATAJPA)
 public class DataJpaUserServiceTest extends AbstractUserServiceTest {
+    @Test
+    public void testGetWithMeals() throws Exception {
+        User user = service.getWithMeals(USER_ID);
+        MATCHER.assertEquals(USER, user);
+        MealTestData.MATCHER.assertCollectionEquals(MealTestData.MEALS, user.getMeals());
+    }
+
+    @Test(expected = NotFoundException.class)
+    public void testGetWithMealsNotFound() throws Exception {
+        service.getWithMeals(1);
+    }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/repository/MealRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/MealRepository.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/repository/MealRepository.java	(revision )
@@ -24,4 +24,8 @@
 
     // ORDERED dateTime
     Collection<Meal> getBetween(LocalDateTime startDate, LocalDateTime endDate, int userId);
+
+    default Meal getWithUser(int id, int userId) {
+        throw new UnsupportedOperationException();
+    }
 }
Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudMealRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudMealRepository.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudMealRepository.java	(revision )
@@ -32,4 +32,6 @@
     @Query("SELECT m from Meal m WHERE m.user.id=:userId AND m.dateTime BETWEEN :startDate AND :endDate ORDER BY m.dateTime DESC")
     List<Meal> getBetween(@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate, @Param("userId") int userId);
 
+    @Query("SELECT m FROM Meal m JOIN FETCH m.user WHERE m.id = ?1 and m.user.id = ?2")
+    Meal getWithUser(int id, int userId);
 }
Index: src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(revision )
@@ -63,4 +63,9 @@
     @Override
     public void evictCache() {
     }
+
+    @Override
+    public User getWithMeals(int id) {
+        return ExceptionUtil.checkNotFoundWithId(repository.getWithMeals(id), id);
+    }
 }
Index: src/main/java/ru/javawebinar/topjava/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/User.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/model/User.java	(revision )
@@ -1,15 +1,15 @@
 package ru.javawebinar.topjava.model;
 
-import ru.javawebinar.topjava.util.MealsUtil;
-
 import org.hibernate.validator.constraints.Email;
 import org.hibernate.validator.constraints.Length;
 import org.hibernate.validator.constraints.NotEmpty;
+import ru.javawebinar.topjava.util.MealsUtil;
 
 import javax.persistence.*;
 import javax.validation.constraints.Digits;
 import java.util.Date;
 import java.util.EnumSet;
+import java.util.List;
 import java.util.Set;
 
 /**
@@ -55,6 +55,10 @@
     @Digits(fraction = 0, integer = 4)
     private int caloriesPerDay = MealsUtil.DEFAULT_CALORIES_PER_DAY;
 
+    @OneToMany(cascade = CascadeType.REMOVE, fetch = FetchType.LAZY, mappedBy = "user")
+    @OrderBy("dateTime DESC")
+    protected List<Meal> meals;
+
     public User() {
     }
 
@@ -117,6 +121,10 @@
 
     public String getPassword() {
         return password;
+    }
+
+    public List<Meal> getMeals() {
+        return meals;
     }
 
     @Override
Index: src/main/java/ru/javawebinar/topjava/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/UserRepository.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/repository/UserRepository.java	(revision )
@@ -21,4 +21,8 @@
     User getByEmail(String email);
 
     List<User> getAll();
+
+    default User getWithMeals(int id){
+        throw new UnsupportedOperationException();
+    }
 }
Index: src/main/java/ru/javawebinar/topjava/service/MealService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/MealService.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/service/MealService.java	(revision )
@@ -28,4 +28,6 @@
     Meal update(Meal meal, int userId) throws NotFoundException;
 
     Meal save(Meal meal, int userId);
+
+    Meal getWithUser(int id, int userId);
 }
Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepositoryImpl.java	(date 1476283161000)
+++ src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepositoryImpl.java	(revision )
@@ -42,4 +42,9 @@
     public List<User> getAll() {
         return crudRepository.findAll();
     }
+
+    @Override
+    public User getWithMeals(int id) {
+        return crudRepository.getWithMeals(id);
+    }
 }
Index: src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaMealServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaMealServiceTest.java	(date 1476283161000)
+++ src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaMealServiceTest.java	(revision )
@@ -1,10 +1,27 @@
 package ru.javawebinar.topjava.service.datajpa;
 
+import org.junit.Test;
 import org.springframework.test.context.ActiveProfiles;
+import ru.javawebinar.topjava.UserTestData;
+import ru.javawebinar.topjava.model.Meal;
 import ru.javawebinar.topjava.service.AbstractMealServiceTest;
+import ru.javawebinar.topjava.util.exception.NotFoundException;
 
+import static ru.javawebinar.topjava.MealTestData.*;
 import static ru.javawebinar.topjava.Profiles.DATAJPA;
+import static ru.javawebinar.topjava.UserTestData.ADMIN_ID;
 
 @ActiveProfiles(DATAJPA)
 public class DataJpaMealServiceTest extends AbstractMealServiceTest {
+    @Test
+    public void testGetWithUser() throws Exception {
+        Meal adminMeal = service.getWithUser(ADMIN_MEAL_ID, ADMIN_ID);
+        MATCHER.assertEquals(ADMIN_MEAL1, adminMeal);
+        UserTestData.MATCHER.assertEquals(UserTestData.ADMIN, adminMeal.getUser());
+    }
+
+    @Test(expected = NotFoundException.class)
+    public void testGetWithUserNotFound() throws Exception {
+        service.getWithUser(MEAL1_ID, ADMIN_ID);
+    }
 }
\ No newline at end of file
