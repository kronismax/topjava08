Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java	(date 1475673759000)
+++ src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java	(revision )
@@ -1,6 +1,5 @@
 package ru.javawebinar.topjava.repository.datajpa;
 
-import org.springframework.data.domain.Sort;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Modifying;
 import org.springframework.data.jpa.repository.Query;
@@ -18,7 +17,6 @@
 public interface CrudUserRepository extends JpaRepository<User, Integer> {
     @Transactional
     @Modifying
-//    @Query(name = User.DELETE)
     @Query("DELETE FROM User u WHERE u.id=:id")
     int delete(@Param("id") int id);
 
@@ -30,7 +28,8 @@
     User findOne(Integer id);
 
     @Override
-    List<User> findAll(Sort sort);
+    @Query("SELECT u FROM User u LEFT JOIN FETCH u.roles ORDER BY u.name, u.email")
+    List<User> findAll();
 
     User getByEmail(String email);
 
Index: src/main/java/ru/javawebinar/topjava/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/User.java	(date 1475673759000)
+++ src/main/java/ru/javawebinar/topjava/model/User.java	(revision )
@@ -48,7 +48,7 @@
     @Enumerated(EnumType.STRING)
     @CollectionTable(name = "user_roles", joinColumns = @JoinColumn(name = "user_id"))
     @Column(name = "role")
-    @ElementCollection(fetch = FetchType.EAGER)
+    @ElementCollection(fetch = FetchType.LAZY)
     protected Set<Role> roles;
 
     @Column(name = "calories_per_day", columnDefinition = "default 2000")
Index: src/main/java/ru/javawebinar/topjava/model/BaseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/BaseEntity.java	(date 1475673759000)
+++ src/main/java/ru/javawebinar/topjava/model/BaseEntity.java	(revision )
@@ -1,19 +1,30 @@
 package ru.javawebinar.topjava.model;
 
+import org.hibernate.Hibernate;
+import org.springframework.data.domain.Persistable;
+
 import javax.persistence.*;
 
 /**
  * User: gkislin
  * Date: 22.08.2014
+ * <p>
+ * Do not manipulate new (transient) entries in HashSet/HashMap without overriding hashCode
+ * http://stackoverflow.com/a/39827962/548473
+ *
+ * @see org.springframework.data.jpa.domain.AbstractPersistable
  */
 @MappedSuperclass
+// http://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access
 @Access(AccessType.FIELD)
-public class BaseEntity {
+public class BaseEntity implements Persistable<Integer> {
     public static final int START_SEQ = 100000;
 
     @Id
     @SequenceGenerator(name = "global_seq", sequenceName = "global_seq", allocationSize = 1)
     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "global_seq")
+    // PROPERTY access for id due to bug: https://hibernate.atlassian.net/browse/HHH-3718
+    @Access(value = AccessType.PROPERTY)
     protected Integer id;
 
     public BaseEntity() {
@@ -27,10 +38,12 @@
         this.id = id;
     }
 
+    @Override
     public Integer getId() {
         return id;
     }
 
+    @Override
     public boolean isNew() {
         return (this.id == null);
     }
@@ -40,19 +53,16 @@
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (o == null || !getClass().equals(Hibernate.getClass(o))) {
             return false;
         }
         BaseEntity that = (BaseEntity) o;
-        if (id == null || that.id == null) {
-            return false;
+
+        return null != getId() && getId().equals(that.getId());
-        }
+    }
-        return id.equals(that.id);
-    }
 
     @Override
     public int hashCode() {
-        return (id == null) ? 0 : id;
+        return (getId() == null) ? 0 : getId();
     }
-
 }
Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepositoryImpl.java	(date 1475673759000)
+++ src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepositoryImpl.java	(revision )
@@ -1,7 +1,6 @@
 package ru.javawebinar.topjava.repository.datajpa;
 
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.data.domain.Sort;
 import org.springframework.stereotype.Repository;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.repository.UserRepository;
@@ -15,7 +14,6 @@
 
 @Repository
 public class DataJpaUserRepositoryImpl implements UserRepository {
-    private static final Sort SORT_NAME_EMAIL = new Sort("name", "email");
 
     @Autowired
     private CrudUserRepository crudRepository;
@@ -42,6 +40,6 @@
 
     @Override
     public List<User> getAll() {
-        return crudRepository.findAll(SORT_NAME_EMAIL);
+        return crudRepository.findAll();
     }
 }
